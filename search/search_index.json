{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pancake project A toolkit for PHP projects. This project is proudly maintained by @guibranco Source code available at: GitHub Currently opened issues: Project status Build status Last commit Coverage Code Smells LoC","title":"Pancake project"},{"location":"#pancake-project","text":"A toolkit for PHP projects. This project is proudly maintained by @guibranco Source code available at: GitHub Currently opened issues:","title":"Pancake project"},{"location":"#project-status","text":"Build status Last commit Coverage Code Smells LoC","title":"Project status"},{"location":"changelog/","text":"Changelog Version 0.6 [2024-04-21] #118 - Add Logger class by @guibranco . Version 0.5 [2024-04-21] #119 - Add OneSignal class by @guibranco . Version 0.4 [2024-04-21] #115 - Add GUID (v4) class by @guibranco . Version 0.3 [2024-04-08] #81 - Add Health Checks class by @guibranco . Version 0.2 [2024-03-20] #86 - Add Request class by @guibranco . Version 0.1 [2024-03-18] Create the project's basic structure and pipeline by @guibranco .","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-06-2024-04-21","text":"#118 - Add Logger class by @guibranco .","title":"Version 0.6 [2024-04-21]"},{"location":"changelog/#version-05-2024-04-21","text":"#119 - Add OneSignal class by @guibranco .","title":"Version 0.5 [2024-04-21]"},{"location":"changelog/#version-04-2024-04-21","text":"#115 - Add GUID (v4) class by @guibranco .","title":"Version 0.4 [2024-04-21]"},{"location":"changelog/#version-03-2024-04-08","text":"#81 - Add Health Checks class by @guibranco .","title":"Version 0.3 [2024-04-08]"},{"location":"changelog/#version-02-2024-03-20","text":"#86 - Add Request class by @guibranco .","title":"Version 0.2 [2024-03-20]"},{"location":"changelog/#version-01-2024-03-18","text":"Create the project's basic structure and pipeline by @guibranco .","title":"Version 0.1 [2024-03-18]"},{"location":"contributing/","text":"Contributing Refer to CONTRIBUTING.md to learn how to contribute to this project! Contributors Guilherme Branco Stracini Bots github-actions[bot] dependabot[bot] Snyk Bot","title":"Contributing"},{"location":"contributing/#contributing","text":"Refer to CONTRIBUTING.md to learn how to contribute to this project!","title":"Contributing"},{"location":"contributing/#contributors","text":"Guilherme Branco Stracini","title":"Contributors"},{"location":"contributing/#bots","text":"github-actions[bot] dependabot[bot] Snyk Bot","title":"Bots"},{"location":"installation/","text":"Installation About The Pancake project is a set of libraries for basic PHP projects with API and/or worker/service. Github Releases Download the latest zip file from the Release page. Packagist package repository Package Version Downloads pancake Composer (manual): Pancake composer require guibranco/pancake","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#about","text":"The Pancake project is a set of libraries for basic PHP projects with API and/or worker/service.","title":"About"},{"location":"installation/#github-releases","text":"Download the latest zip file from the Release page.","title":"Github Releases"},{"location":"installation/#packagist-package-repository","text":"Package Version Downloads pancake","title":"Packagist package repository"},{"location":"installation/#composer-manual","text":"Pancake composer require guibranco/pancake","title":"Composer (manual):"},{"location":"license/","text":"MIT License Copyright (c) 2024 Guilherme Branco Stracini Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"user-guide/basic-usage/","text":"Basic usage Main namespace is GuiBranco\\Pancake Features GUID v4 Health Checks HTTP Requests Logger One Signal","title":"Basic usage"},{"location":"user-guide/basic-usage/#basic-usage","text":"Main namespace is GuiBranco\\Pancake","title":"Basic usage"},{"location":"user-guide/basic-usage/#features","text":"GUID v4 Health Checks HTTP Requests Logger One Signal","title":"Features"},{"location":"user-guide/guid-v4/","text":"GUID (v4) Table of content GUID (v4) Table of content About Requirements Available methods Empty Random About This class is responsible for generating a GUID/UUID string. Requirements None. Available methods Empty Generates an empty GUID/UUID full of zeros. Example: 00000000-0000-0000-0000-000000000000 $emptyUUID = GUIDv4::empty(); Random Generates a random GUID/UUID. Example: d7263b5c-66b7-428e-8e6d-3df2ec9a92b9 $uuid = GUIDv4::random();","title":"GUID (v4)"},{"location":"user-guide/guid-v4/#guid-v4","text":"","title":"GUID (v4)"},{"location":"user-guide/guid-v4/#table-of-content","text":"GUID (v4) Table of content About Requirements Available methods Empty Random","title":"Table of content"},{"location":"user-guide/guid-v4/#about","text":"This class is responsible for generating a GUID/UUID string.","title":"About"},{"location":"user-guide/guid-v4/#requirements","text":"None.","title":"Requirements"},{"location":"user-guide/guid-v4/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/guid-v4/#empty","text":"Generates an empty GUID/UUID full of zeros. Example: 00000000-0000-0000-0000-000000000000 $emptyUUID = GUIDv4::empty();","title":"Empty"},{"location":"user-guide/guid-v4/#random","text":"Generates a random GUID/UUID. Example: d7263b5c-66b7-428e-8e6d-3df2ec9a92b9 $uuid = GUIDv4::random();","title":"Random"},{"location":"user-guide/health-checks/","text":"Health Checks Table of content Health Checks Table of content About Requirements Available methods Set headers Heartbeat Start End Fail Error Reset state Examples Simple heartbeat Measuring time Try-Catch-Finally block Run identifier (RID) About This class is responsible for doing requests to HealthChecks.io service. It uses Request class to perform the HTTP requests. Requirements This requires lib curl to be active with your PHP settings. This also requires a token from the Health Checks services. Available methods Set headers Set the HTTP headers for the requests (useful for setting the HTTP user-agent). $headers = array(\"User-Agent: user-project/1.0\"); $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->setHeaders($headers); Heartbeat Performs an HTTP GET request to the service, logging a successfully ping. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->heartbeat(); Start Start a request, and wait until a successfully/failure call to measure process duration. This will do a HTTP GET request to the /start endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); End End a request, measuring the process duration. To this work properly, you should call Start before. If you call this direct, without \"starting\" it prior, it will act the same way as Heartbeat . This will perform an HTTP GET request to the / endpoint. If the Fail or Error has been called, then the request will be to /fail endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->end(); Fail Acknowledge a failure to the /fail endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->fail(); Error Like the Fail method, this one will also acknowledge a failure to the /fail endpoint. The difference is this method will do a HTTP POST request, with an error message (parameter). $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->error(\"error reason for the failure\"); Reset state Reset the state of this instance, so an end call will do a successfully end request. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); $healthChecks->fail(); $healthChecks->resetState(); $healthChecks->end(); // this will be a call to / instead of /fail Examples Simple heartbeat A simple example: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->heartbeat(); Measuring time Measuring the time to run the operation: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); // time-consuming operation // .... $healthChecks->end(); Try-Catch-Finally block Using a try/catch block: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); try { // time-consuming operation // .... } catch(Exception $e) { $healthChecks->error($e->getMessage()); } finally { $healthChecks->end(); } Run identifier (RID) HealthChecks.io allows you to have parallel checks for the same monitor, to handle this, they allow you to send a custom UUID/GUID as the run id To set the run id just set a UUID as the second constructor parameter: $healthChecksA = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000000\"); $healthChecksB = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000001\"); $healthChecksC = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000002\"); $healthChecksD = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000003\");","title":"Health Checks"},{"location":"user-guide/health-checks/#health-checks","text":"","title":"Health Checks"},{"location":"user-guide/health-checks/#table-of-content","text":"Health Checks Table of content About Requirements Available methods Set headers Heartbeat Start End Fail Error Reset state Examples Simple heartbeat Measuring time Try-Catch-Finally block Run identifier (RID)","title":"Table of content"},{"location":"user-guide/health-checks/#about","text":"This class is responsible for doing requests to HealthChecks.io service. It uses Request class to perform the HTTP requests.","title":"About"},{"location":"user-guide/health-checks/#requirements","text":"This requires lib curl to be active with your PHP settings. This also requires a token from the Health Checks services.","title":"Requirements"},{"location":"user-guide/health-checks/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/health-checks/#set-headers","text":"Set the HTTP headers for the requests (useful for setting the HTTP user-agent). $headers = array(\"User-Agent: user-project/1.0\"); $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->setHeaders($headers);","title":"Set headers"},{"location":"user-guide/health-checks/#heartbeat","text":"Performs an HTTP GET request to the service, logging a successfully ping. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->heartbeat();","title":"Heartbeat"},{"location":"user-guide/health-checks/#start","text":"Start a request, and wait until a successfully/failure call to measure process duration. This will do a HTTP GET request to the /start endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start();","title":"Start"},{"location":"user-guide/health-checks/#end","text":"End a request, measuring the process duration. To this work properly, you should call Start before. If you call this direct, without \"starting\" it prior, it will act the same way as Heartbeat . This will perform an HTTP GET request to the / endpoint. If the Fail or Error has been called, then the request will be to /fail endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->end();","title":"End"},{"location":"user-guide/health-checks/#fail","text":"Acknowledge a failure to the /fail endpoint. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->fail();","title":"Fail"},{"location":"user-guide/health-checks/#error","text":"Like the Fail method, this one will also acknowledge a failure to the /fail endpoint. The difference is this method will do a HTTP POST request, with an error message (parameter). $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->error(\"error reason for the failure\");","title":"Error"},{"location":"user-guide/health-checks/#reset-state","text":"Reset the state of this instance, so an end call will do a successfully end request. $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); $healthChecks->fail(); $healthChecks->resetState(); $healthChecks->end(); // this will be a call to / instead of /fail","title":"Reset state"},{"location":"user-guide/health-checks/#examples","text":"","title":"Examples"},{"location":"user-guide/health-checks/#simple-heartbeat","text":"A simple example: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->heartbeat();","title":"Simple heartbeat"},{"location":"user-guide/health-checks/#measuring-time","text":"Measuring the time to run the operation: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); // time-consuming operation // .... $healthChecks->end();","title":"Measuring time"},{"location":"user-guide/health-checks/#try-catch-finally-block","text":"Using a try/catch block: $healthChecks = new HealthChecks(\"your-monitor-token\"); $healthChecks->start(); try { // time-consuming operation // .... } catch(Exception $e) { $healthChecks->error($e->getMessage()); } finally { $healthChecks->end(); }","title":"Try-Catch-Finally block"},{"location":"user-guide/health-checks/#run-identifier-rid","text":"HealthChecks.io allows you to have parallel checks for the same monitor, to handle this, they allow you to send a custom UUID/GUID as the run id To set the run id just set a UUID as the second constructor parameter: $healthChecksA = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000000\"); $healthChecksB = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000001\"); $healthChecksC = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000002\"); $healthChecksD = new HealthChecks(\"your-monitor-token\", \"00000000-0000-0000-0000-000000000003\");","title":"Run identifier (RID)"},{"location":"user-guide/logger/","text":"Logger Table of content Logger Table of content About Requirements Available methods Log Remarks About This class send detailed information about the caller method to a endpoint that expects a predefined JSON structure. It uses Requet class to perform HTTP requests. Requirements This requires lib curl to be active with your PHP settings. This also requires a key/token pair from the logger services. Available methods Log Send the log with a custom message (string) and details (anything) to the log-message endpoint. $logger = new Logger(\"https://logger-service.endpoint.com/api/v1/\", \"key\", \"token\"); $logger->log(\"Sample message\", array(\"test\"=>\"test\", \"foo\"=>\"bar\")); $logger->log(\"Another message\", \"Details as string\"); Remarks This class is intended to be used by my own and internal services, to my own logger service. This is usefull just to centralize my logs without any market software (SEQ, Kibana, GrayLog, New Relic, etc)","title":"Logger"},{"location":"user-guide/logger/#logger","text":"","title":"Logger"},{"location":"user-guide/logger/#table-of-content","text":"Logger Table of content About Requirements Available methods Log Remarks","title":"Table of content"},{"location":"user-guide/logger/#about","text":"This class send detailed information about the caller method to a endpoint that expects a predefined JSON structure. It uses Requet class to perform HTTP requests.","title":"About"},{"location":"user-guide/logger/#requirements","text":"This requires lib curl to be active with your PHP settings. This also requires a key/token pair from the logger services.","title":"Requirements"},{"location":"user-guide/logger/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/logger/#log","text":"Send the log with a custom message (string) and details (anything) to the log-message endpoint. $logger = new Logger(\"https://logger-service.endpoint.com/api/v1/\", \"key\", \"token\"); $logger->log(\"Sample message\", array(\"test\"=>\"test\", \"foo\"=>\"bar\")); $logger->log(\"Another message\", \"Details as string\");","title":"Log"},{"location":"user-guide/logger/#remarks","text":"This class is intended to be used by my own and internal services, to my own logger service. This is usefull just to centralize my logs without any market software (SEQ, Kibana, GrayLog, New Relic, etc)","title":"Remarks"},{"location":"user-guide/one-signal/","text":"One Signal Table of content One Signal Table of content About Requirements Available methods Send notification About This class enable the ability to send One Signal notifications. It uses Request class to perform HTTP requests. Requirements This requires lib curl to be active with your PHP settings. This also requires a token from One Signal services. Available methods Send notification Send a push notification using the One Signal V1 API endpoint. $oneSignal = new OneSignal(\"your-OneSignal-api-token\"); $oneSignalAppId = \"00000000-0000-0000-8000-000000000000\"; $heading = \"My push notification\"; $content = \"Hi!\\n\\nSome content of the notification\"; $fields = array( 'app_id' => $oneSignalAppId, 'included_segments' => array('All'), 'headings' => array('en' => $heading), 'contents' => array('en' => $content), 'web_push_topic' => 'unique-topic-identification', 'chrome_web_icon' => 'https://example.com/images/logo.png' ); $oneSignal->sendNotification($fields);","title":"One Signal"},{"location":"user-guide/one-signal/#one-signal","text":"","title":"One Signal"},{"location":"user-guide/one-signal/#table-of-content","text":"One Signal Table of content About Requirements Available methods Send notification","title":"Table of content"},{"location":"user-guide/one-signal/#about","text":"This class enable the ability to send One Signal notifications. It uses Request class to perform HTTP requests.","title":"About"},{"location":"user-guide/one-signal/#requirements","text":"This requires lib curl to be active with your PHP settings. This also requires a token from One Signal services.","title":"Requirements"},{"location":"user-guide/one-signal/#available-methods","text":"","title":"Available methods"},{"location":"user-guide/one-signal/#send-notification","text":"Send a push notification using the One Signal V1 API endpoint. $oneSignal = new OneSignal(\"your-OneSignal-api-token\"); $oneSignalAppId = \"00000000-0000-0000-8000-000000000000\"; $heading = \"My push notification\"; $content = \"Hi!\\n\\nSome content of the notification\"; $fields = array( 'app_id' => $oneSignalAppId, 'included_segments' => array('All'), 'headings' => array('en' => $heading), 'contents' => array('en' => $content), 'web_push_topic' => 'unique-topic-identification', 'chrome_web_icon' => 'https://example.com/images/logo.png' ); $oneSignal->sendNotification($fields);","title":"Send notification"},{"location":"user-guide/request/","text":"Request Table of content Request Table of content About Requirements Available HTTP verbs Get Post Put Patch Delete Delete without payload Delete with payload Options Head Troubleshooting About This class is responsible for doing cURL request with custom headers. Requirements This requires lib curl to be active with your PHP settings. Available HTTP verbs Get Performs HTTP GET request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->get(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Post Performs HTTP POST request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"Foo\" => \"Bar\"); $request = new Request(); $response = $request->post(\"http://example.com/\", json_encode($payload), $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Put Performs HTTP PUT request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"Foo\" => \"Rab\"); $request = new Request(); $response = $request->put(\"https://example.com/\", json_encode($payload), $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Patch Performs HTTP PATCH request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->patch(\"https://example.com/\", json_encode($payload), $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; } Delete Delete without payload Performs HTTP DELETE request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->delete(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->statusCode; } Delete with payload Performs HTTP DELETE request with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->delete(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->statusCode; } Options Performs HTTP OPTIONS request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->options(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { foreach ($response->headers as $header) { echo $header; } } Head Performs HTTP HEAD request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->head(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { foreach ($response->headers as $header) { echo $header; } } Troubleshooting If for some reason the request could not be completed, the result status code will be -1 and an error property will be set with the content of curl_error response. $request = new Request(); $response = $request->get(\"https://invalid-domain\"); if ($response->statusCode === -1) { echo $response->error; // This is only populated when the status code equals to -1. }","title":"Request"},{"location":"user-guide/request/#request","text":"","title":"Request"},{"location":"user-guide/request/#table-of-content","text":"Request Table of content About Requirements Available HTTP verbs Get Post Put Patch Delete Delete without payload Delete with payload Options Head Troubleshooting","title":"Table of content"},{"location":"user-guide/request/#about","text":"This class is responsible for doing cURL request with custom headers.","title":"About"},{"location":"user-guide/request/#requirements","text":"This requires lib curl to be active with your PHP settings.","title":"Requirements"},{"location":"user-guide/request/#available-http-verbs","text":"","title":"Available HTTP verbs"},{"location":"user-guide/request/#get","text":"Performs HTTP GET request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->get(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Get"},{"location":"user-guide/request/#post","text":"Performs HTTP POST request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"Foo\" => \"Bar\"); $request = new Request(); $response = $request->post(\"http://example.com/\", json_encode($payload), $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Post"},{"location":"user-guide/request/#put","text":"Performs HTTP PUT request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"Foo\" => \"Rab\"); $request = new Request(); $response = $request->put(\"https://example.com/\", json_encode($payload), $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Put"},{"location":"user-guide/request/#patch","text":"Performs HTTP PATCH request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->patch(\"https://example.com/\", json_encode($payload), $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->body; }","title":"Patch"},{"location":"user-guide/request/#delete","text":"","title":"Delete"},{"location":"user-guide/request/#delete-without-payload","text":"Performs HTTP DELETE request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->delete(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->statusCode; }","title":"Delete without payload"},{"location":"user-guide/request/#delete-with-payload","text":"Performs HTTP DELETE request with custom headers and a payload. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $payload = array(\"some\" => \"thing\"); $request = new Request(); $response = $request->delete(\"https://example.com/\", $headers, json_encode($payload)); if ($response->statusCode >= 200 && $response->statusCode < 300) { echo $response->statusCode; }","title":"Delete with payload"},{"location":"user-guide/request/#options","text":"Performs HTTP OPTIONS request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->options(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { foreach ($response->headers as $header) { echo $header; } }","title":"Options"},{"location":"user-guide/request/#head","text":"Performs HTTP HEAD request with custom headers. $headers = array(\"User-Agent: test/1.0\", \"Accept: application/json\"); $request = new Request(); $response = $request->head(\"https://example.com/\", $headers); if ($response->statusCode >= 200 && $response->statusCode < 300) { foreach ($response->headers as $header) { echo $header; } }","title":"Head"},{"location":"user-guide/request/#troubleshooting","text":"If for some reason the request could not be completed, the result status code will be -1 and an error property will be set with the content of curl_error response. $request = new Request(); $response = $request->get(\"https://invalid-domain\"); if ($response->statusCode === -1) { echo $response->error; // This is only populated when the status code equals to -1. }","title":"Troubleshooting"}]}